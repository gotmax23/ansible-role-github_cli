---
# tasks file for github_cli
- name: Ensure variables are set correctly
  ansible.builtin.import_tasks: assert.yml
  delegate_to: localhost
  vars:
    ansible_connection: local
  become: false

- name: "{{ installw }} Github CLI repo on RPM-based distributions"
  when:
    - github_cli_install_method == "repo"
    - ansible_pkg_mgr in [ "dnf", "yum", "zypper" ]
  block:
    - name: "{{ installw }} Github CLI RPM key"
      ansible.builtin.rpm_key:
        state: "{{ github_cli_state }}"
        key: "{{ github_cli_rpm_key_url }}"
        fingerprint: "{{ github_cli_rpm_key_fingerprint if github_cli_check_rpm_key_fingerprint | bool else omit }}"

    - name: Import Github CLI RPM repository
      when: github_cli_state == "present"
      ansible.builtin.get_url:
        url: "{{ github_cli_rpm_repo_conf_url }}"
        dest: "{{ github_cli_rpm_repo_conf_dest }}"
        owner: root
        group: root
        mode: "0644"

    - name: Remove Github CLI RPM repository if necessary
      when: github_cli_state == "absent"
      ansible.builtin.file:
        path: "{{ github_cli_rpm_repo_conf_dest }}"
        state: absent

- name: "{{ installw }} Github CLI repo on Apt-based distributions"
  when:
    - github_cli_install_method == "repo"
    - ansible_pkg_mgr == "apt"
  block:
    - name: Ensure that gpg, apt-transport-https, and curl are installed (apt-based distros)
      ansible.builtin.apt:
        name: [ "gpg", "apt-transport-https", "curl" ]

    - name: Ensure that Apt keyring directory exists
      ansible.builtin.file:
        path: "{{ github_cli_apt_key_dir }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Import Github CLI Apt key
      when: github_cli_state == "present"
      ansible.builtin.shell:
        cmd: "{{ github_cli_apt_key_import_cmd }}"  # noqa command-instead-of-shell
        creates: "{{ github_cli_apt_key_dest }}"

    - name: Remove Github CLI Apt key if necesarry
      when: github_cli_state == "absent"
      ansible.builtin.file:
        path: "{{ github_cli_apt_key_dest }}"
        state: absent

    - name: Get dpkg architecture
      register: github_cli_dpkg_arch
      changed_when: false
      ansible.builtin.command:
        cmd: "dpkg --print-architecture"

    - name: "{{ installw }} Github CLI Apt repository"
      ansible.builtin.apt_repository:
        state: "{{ github_cli_state }}"
        repo: "{{ github_cli_apt_repo }}"
        filename: github-cli
        update_cache: false  # Package cache refreshed in next task

- name: "{{ installw }} Github CLI package"
  when:
    - github_cli_install_method in [ "repo", "distro_package" ]
  ansible.builtin.package:
    state: "{{ github_cli_state }}"
    name: "{{ github_cli_distro_package_name if github_cli_install_method == 'distro_package' else 'gh' }}"
    update_cache: true

# TODO: AUR Support
# TODO: Github Releases Tarballs
# TODO: Github Releases Other Packages
# TODO: Generate bash, zsh, and fish completions
